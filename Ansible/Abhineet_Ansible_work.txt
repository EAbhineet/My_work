   
Configuration Management tools: 
================================
These tools are based on Push and pull based mechanism.

PUSH: pushing the config from master machine to all the n servers
ANSIBLE is a push based mechanism. It is agentless. Written in YAML

PULL: In this agents runs on all the slave servers and these agenets will pull the config changes from master.
Chef and puppet are pull based. Domain specific languages to write the codes.(kind of similar to ruby/shell)


ANSIBLE:
========
1. Ansible have options for grouping the servers -- like DB servers in 1 group, Web server in diff...and likewise.
2. Two ways to write ansible script: 1. adhoc commands 2. Playbooks
3. ansible all<hosts_group> -m <module> -a <attributes>
4. ansible-doc -s <module> : to get the documentation of specific module

  1  cd
    2  apt install ansible
    3  vi /etc/ansible/
    4  cd /etc/ansible/
    5  ls
    6  vi ansible.cfg
    7  ls
    8  vi ansible.cfg
    9  vi hosts
   10  ssh-keygen
   11  cat /root/.ssh/id_rsa.pub (on master)
   12  vi /root/.ssh/authorized_keys (on worker)
   13  vi hosts
   14  ansible all -m ping
    ansible dbserver -m ping
   15  history
   
<<HOST FILE /etc/ansible/>>
[dbserver]
172.31.34.48
[webserver]
172.31.10.25



_________________
# Inventory File
================
# Web Servers
web1 ansible_host=server1.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web2 ansible_host=server2.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web3 ansible_host=server3.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!

# Database Servers
db1 ansible_host=server4.com ansible_connection=winrm ansible_user=administrator ansible_password=Password123!

[web_servers]
web1
web2
web3

[db_servers]
db1
#create a group of groups in inventory
[all_servers:children]
web_servers
db_servers

===============================================================================================

##ADHOC COMMAND##
 7  ansible-doc -s apt
    9  ansible webserver -m apt -a "name=apache2 state=present"
   10  ansible webserver -m apt -a "name=apache2 state=absent"
   11  ansible webserver -m apt -a "name=apache2 state=present"
   
#playbook structure
playbook ==> plays ==> tasks ==> modules

======================================================================================
 1  cd
    2  ansible dbserver -m ping
    3  ansible all -m ping
    4  ansible-doc --list
    5  ansible-doc -s ping
    7  ansible-doc -s apt
    9  ansible webserver -m apt -a "name=apache2 state=present"
   10  ansible webserver -m apt -a "name=apache2 state=absent"
   11  ansible webserver -m apt -a "name=apache2 state=present"
   12  history
   13  mkdir playbooks
   14  cd playbooks/
   15  vi 1.yaml
   16  ansible webserver -m apt -a "name=apache2 state=absent"
   17  ansible-playbook 1.yaml --syntax-check
   18  vi 1.yaml
   19  ansible-playbook 1.yaml --syntax-check
   20  vi 1.yaml
   21  ansible-playbook 1.yaml
   22  vi 1.yaml
   23  ansible-playbook 1.yaml
   24  cat 1.yaml
   25  history

===============================================================================================

- name: First play
  hosts: webserver
  become: yes
  tasks:
     - name: Install apache server
       apt(ubuntu)/yum(linux): 
          name: apache2
          state: absent
     - name: Restart the apache service
       service:
          name: apache2
          state: restarted

#COPY FILES
===========
- name: test playbook
  hosts: webserver
  become: yes
  tasks:
      - name: copy files
        copy:
           src: 1.yaml
           dest: /opt

#CREATE USER
============
- name: Create user
  hosts: webserver
  become: yes
  tasks:
     - name: Create uset myuser
       user:
        uid: 1112
        name: myuser
        home: /home/myuser
        shell: /bin/bash

======================================================================
ssh-copy-id -i ~/.ssh/mykey user@host


Gathering facts task while running ansible playbook:
====================================================
Complete detailed info about the server


# COPY CONTENTS OF DIRECTORY 
==============================
- name: Ansible Copy Directory Example Local to Remote
  hosts: remoteserver
  tasks:
    - name: Copying the Directory's contents (sub directories/files)
      become: true 
      copy:
        src: ~/Downloads/logos/ # IF YOU PUT SLASH HERE, IT WILL COPY THE files/sub-directories from source to destination folder
        dest: /var/www/html
        owner: apache
        group: apache        
        mode: 0644
        
#Copy directory and itâ€™s content in a recursive manner
======================================================
- name: Ansible Copy Directory Example Local to Remote
  hosts: remoteserver
  tasks:
    - name: Copying the Directory and its contents
      become: true 
      copy:
        src: ~/Downloads/logos # IF YOU DONT PUT SLASH HERE, IT WILL COPY THE source directories to destination folder
        dest: /var/www/html
        owner: apache
        group: apache        
        mode: 0644
        
     # ADHOC COMMAND FOR ABOVE:
     ansible master_server -m copy -a "src=~/Downloads/logos dest=/var/www/html/ owner=apache group=apache mode=0644 " -i ansible_hosts -b

=====================================================================================

to execute the commands via ansible:
====================================
ansible all -a "ls -ltr /opt/finance" -i inventory (inventory is the list of hosts)


Ansible Archive Module : tar.gz path and copy to destination as games.tar.gz with the user as owner of the file
===============================================================================================================
- name: Ansible Archive Module
  hosts: stapp01, stapp02, stapp03
  become: yes
  tasks:
    - name: As per the task create the archive file and set the owner
      archive:
        path: /usr/src/finance/
        dest: /opt/finance/games.tar.gz
        format: gz
        force_archive: true
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

